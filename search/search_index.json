{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Flat","text":"<p>Flat provides a neat SQLite abstraction for your Flutter applications inspired by the Room persistence library. It comes with automatic mapping between in-memory objects and database rows while still offering full control of the database with the use of SQL. As a consequence, it's necessary to have an understanding of SQL and SQLite in order to harvest Flat's full potential.</p> <ul> <li>null-safe</li> <li>typesafe</li> <li>reactive</li> <li>lightweight</li> <li>SQL centric</li> <li>no hidden magic</li> <li>no hidden costs</li> <li>iOS, Android, Linux, macOS, Windows</li> </ul> <p>Important</p> <p>The library is open to contributions! Refer to GitHub Discussions for questions, ideas, and discussions.</p> <p> </p>"},{"location":"architecture/","title":"Architecture","text":"<p>The components for storing and accessing data are Entity, Data Access Object (DAO) and Database.</p> <p>The first, Entity, represents a persistent class and thus a database table. DAOs manage the access to Entities and take care of the mapping between in-memory objects and table rows. Lastly, Database, is the central access point to the underlying SQLite database. It holds the DAOs and, beyond that, takes care of initializing the database and its schema. Room serves as the source of inspiration for this composition, because it allows creating a clean separation of the component's responsibilities.</p> <p>The figure shows the relationship between Entity, DAO and Database.</p> <p></p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#160","title":"1.6.0","text":"<ul> <li>Add experimental Web support</li> </ul>"},{"location":"changelog/#154","title":"1.5.4","text":"<ul> <li>Update analyzer to v5</li> </ul>"},{"location":"changelog/#153","title":"1.5.3","text":"<ul> <li>Fix adapter not adding event when result is 0 for single insertion</li> </ul>"},{"location":"changelog/#152","title":"1.5.2","text":"<ul> <li>Tracking changes as a set of table names</li> </ul>"},{"location":"changelog/#1511","title":"1.5.1+1","text":""},{"location":"changelog/#bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fixed generator not recognizing enum values</li> </ul>"},{"location":"changelog/#1501","title":"1.5.0+1","text":""},{"location":"changelog/#bug-fixes_1","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fixed wrong 1.5.0 release!</li> </ul>"},{"location":"changelog/#150","title":"1.5.0","text":""},{"location":"changelog/#bug-fixes_2","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fixed nested embedded objects create statement</li> </ul>"},{"location":"changelog/#maintenance","title":"\ud83d\udee0 Maintenance","text":"<ul> <li>Added support for analyzer v4</li> </ul>"},{"location":"changelog/#140","title":"1.4.0","text":""},{"location":"changelog/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Add embedded objects support</li> </ul>"},{"location":"changelog/#130","title":"1.3.0","text":""},{"location":"changelog/#features_1","title":"\ud83d\ude80 Features","text":"<ul> <li>Add transaction method on database</li> </ul>"},{"location":"changelog/#bug-fixes_3","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fix change events being added during transaction</li> </ul>"},{"location":"changelog/#1201","title":"1.2.0+1","text":"<ul> <li>Renamed Floor to Flat</li> </ul>"},{"location":"changelog/#120","title":"1.2.0","text":""},{"location":"changelog/#changes","title":"Changes","text":"<ul> <li>Improve escaping by using library</li> </ul>"},{"location":"changelog/#bug-fixes_4","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Bugfix/nullable transaction return</li> </ul>"},{"location":"changelog/#maintenance_1","title":"\ud83d\udee0 Maintenance","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":"<p>All credits for this release go to mqus.</p>"},{"location":"changelog/#changes_1","title":"Changes","text":"<ul> <li>Update deps</li> <li>Increase test coverage</li> <li>Bump locked floor_generator version to 1.0.1</li> </ul>"},{"location":"changelog/#features_2","title":"\ud83d\ude80 Features","text":"<ul> <li>Add onConfigure callback</li> </ul>"},{"location":"changelog/#bug-fixes_5","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Retain index ordering</li> </ul>"},{"location":"changelog/#101","title":"1.0.1","text":""},{"location":"changelog/#changes_2","title":"Changes","text":"<ul> <li>Bump mockito to 5.0.3</li> <li>Update dependencies to null-safe versions</li> </ul>"},{"location":"changelog/#features_3","title":"\ud83d\ude80 Features","text":"<ul> <li>Improved Parameter mapping for query methods</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":""},{"location":"changelog/#changes_3","title":"Changes","text":"<ul> <li>Use stable Dart 2.12.0</li> </ul>"},{"location":"changelog/#features_4","title":"\ud83d\ude80 Features","text":"<ul> <li>Make floor null-safe</li> </ul>"},{"location":"changelog/#0191","title":"0.19.1","text":""},{"location":"changelog/#changes_4","title":"Changes","text":"<ul> <li>Remove floor example to pass static analysis</li> </ul>"},{"location":"changelog/#0190","title":"0.19.0","text":""},{"location":"changelog/#changes_5","title":"Changes","text":"<ul> <li>Update website theme</li> <li>Update license with all authors</li> <li>Fix getting started syntax highlighting</li> <li>Improve FTS documentation</li> <li>Introduce tab navigation to website</li> <li>Fix typo in doc title</li> <li>Improve website</li> <li>Slim down README</li> <li>Create MkDocs website</li> <li>Add isolates section to README</li> <li>Run CI only on pushes to develop</li> <li>Use GitHub Discussions for ideas and feedback</li> <li>Add example to floor package</li> </ul>"},{"location":"changelog/#features_5","title":"\ud83d\ude80 Features","text":"<ul> <li>Add Full-text Search support</li> </ul>"},{"location":"changelog/#bug-fixes_6","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fix desktop database path retrieval</li> </ul>"},{"location":"changelog/#0180","title":"0.18.0","text":"<ul> <li>Documentation update on DateTimeConverter sample</li> <li>Change ForeignKeyAction to enum in the generator</li> <li>Add primary key auto increment test</li> </ul>"},{"location":"changelog/#features_6","title":"\ud83d\ude80 Features","text":"<ul> <li>Add support for WITH statements for DatabaseViews</li> </ul>"},{"location":"changelog/#bug-fixes_7","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>More tolerant query with list parameter parsing</li> </ul>"},{"location":"changelog/#0170","title":"0.17.0","text":""},{"location":"changelog/#bug-fixes_8","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Generate distinct type converter instances</li> <li>Fix generation of DAO method with list argument using type converters</li> </ul>"},{"location":"changelog/#0160","title":"0.16.0","text":""},{"location":"changelog/#features_7","title":"\ud83d\ude80 Features","text":"<ul> <li>Add experimental support for type converters</li> </ul>"},{"location":"changelog/#0150","title":"0.15.0","text":""},{"location":"changelog/#changes_6","title":"Changes","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"changelog/#features_8","title":"\ud83d\ude80 Features","text":"<ul> <li>Add support for WITHOUT ROWID tables</li> <li>Check transaction method return types and allow non-void returns</li> </ul>"},{"location":"changelog/#0140","title":"0.14.0","text":""},{"location":"changelog/#changes_7","title":"Changes","text":"<ul> <li>Document entity inheritance and add integration test</li> <li>Raise minimum sqflite version to 1.3.0</li> <li>add integration test for transaction rollback</li> <li>Mention missing null propagation in streams</li> <li>Fix types (integer instead of real)</li> </ul>"},{"location":"changelog/#0130","title":"0.13.0","text":"<p>Attention</p>"},{"location":"changelog/#breaking-change","title":"Breaking Change","text":"<ul> <li>Apply camel case to constants</li> </ul> <p>You need to migrate the explicit usages of <code>OnConflictStrategy</code> and <code>ForeignKeyAction</code> from snake case to camel case.</p>"},{"location":"changelog/#changes_8","title":"Changes","text":"<ul> <li>Mention SQL centricity of Floor in README</li> <li>Add banner to README</li> <li>Update the description of the library</li> <li>Migrate OnConflictStrategy to enum</li> <li>Add more precise limitations of entity class and streams to README</li> <li>Add DAO inheritance example to README</li> <li>Fix database and DAO usage example in the README</li> <li>Update README.md</li> <li>Assert example app's behavior</li> <li>Mention that floor uses first constructor found in entity class</li> <li>Remove snapshot version instructions from README</li> </ul>"},{"location":"changelog/#features_9","title":"\ud83d\ude80 Features","text":"<ul> <li>Support Linux, macOS, Windows</li> <li>Implement simple Streams on DatabaseViews, fix multi-dao changelistener</li> </ul>"},{"location":"changelog/#bug-fixes_9","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Await database path retrieval</li> <li>Fix boolean conversion issues, add regression test, fix indentation</li> <li>Fix wrongly parsed arguments in @Query</li> </ul>"},{"location":"changelog/#0120","title":"0.12.0","text":""},{"location":"changelog/#changes_9","title":"Changes","text":"<ul> <li>Ignore Getters&amp;Setters</li> <li>Use Flutter bundled pub to get and upgrade project dependencies</li> <li>Generate database implementation on every CI run</li> <li>Throw exception when querying for unsupported type</li> <li>Add generated code for example app</li> <li>Add workflow scripts</li> <li>Run real database tests on development machine and CI</li> </ul>"},{"location":"changelog/#features_10","title":"\ud83d\ude80 Features","text":"<ul> <li>Support ByteArrays/Blobs</li> <li>Support inherited fields for entities and views</li> <li>Support database views</li> <li>Support inherited DAO methods</li> <li>Support asynchronous migrations</li> </ul>"},{"location":"changelog/#bug-fixes_10","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fix failing SQLite installation process on CI</li> <li>Fix failing stream query test</li> </ul>"},{"location":"changelog/#0110","title":"0.11.0","text":""},{"location":"changelog/#changes_10","title":"Changes","text":"<ul> <li>Refactor string utility function into extension function</li> <li>Refactor annotation check functions to use extension functions</li> <li>Refactor type check functions to use extension functions</li> </ul>"},{"location":"changelog/#features_11","title":"\ud83d\ude80 Features","text":"<ul> <li>Ignore fields of entities by adding ignore annotation</li> <li>Handle named constructor parameters and ignore field order</li> <li>Exclude static fields from entity mapping</li> </ul>"},{"location":"changelog/#0100","title":"0.10.0","text":""},{"location":"changelog/#changes_11","title":"Changes","text":"<ul> <li>Update dependencies</li> <li>Update README with correct instructions to initialize in memory database</li> </ul>"},{"location":"changelog/#bug-fixes_11","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Make in-memory database actually be just in memory</li> </ul>"},{"location":"changelog/#090","title":"0.9.0","text":""},{"location":"changelog/#bug-fixes_12","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Make IN clauses work with strings</li> <li>Fix foreign key action string representation</li> </ul>"},{"location":"changelog/#080","title":"0.8.0","text":""},{"location":"changelog/#changes_12","title":"Changes","text":"<ul> <li>Update README with clear package import instructions</li> </ul>"},{"location":"changelog/#features_12","title":"\ud83d\ude80 Features","text":"<ul> <li>Introduce static 'to map' functions</li> <li>Add optional callback functions when opening database</li> </ul>"},{"location":"changelog/#bug-fixes_13","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Allow int and string (composite) primary keys</li> </ul>"},{"location":"changelog/#070","title":"0.7.0","text":""},{"location":"changelog/#bug-fixes_14","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Retain reactivity when using transactions</li> </ul>"},{"location":"changelog/#060","title":"0.6.0","text":""},{"location":"changelog/#features_13","title":"\ud83d\ude80 Features","text":"<ul> <li>Add support for IN clauses in query statements</li> <li>Enable compound primary keys</li> </ul>"},{"location":"changelog/#050","title":"0.5.0","text":""},{"location":"changelog/#changes_13","title":"Changes","text":"<ul> <li>Make tasks deletable in example app</li> </ul>"},{"location":"changelog/#features_14","title":"\ud83d\ude80 Features","text":"<ul> <li>Allow multiline string queries</li> <li>Allow void-return queries with arguments</li> </ul>"},{"location":"changelog/#042","title":"0.4.2","text":""},{"location":"changelog/#bug-fixes_15","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fix query parameter substitution regex</li> </ul>"},{"location":"changelog/#040","title":"0.4.0","text":""},{"location":"changelog/#changes_14","title":"Changes","text":"<ul> <li>Enable coverage report</li> <li>Simplify type assertions and add tests</li> </ul>"},{"location":"changelog/#features_15","title":"\ud83d\ude80 Features","text":"<ul> <li>Allow more convenient database initialization</li> </ul>"},{"location":"changelog/#bug-fixes_16","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Use query argument binding instead of manual binding</li> </ul>"},{"location":"changelog/#030","title":"0.3.0","text":""},{"location":"changelog/#changes_15","title":"Changes","text":"<ul> <li>Use TypeChecker for all annotations</li> <li>Add publishing instructions</li> <li>Remove unused annotation names</li> <li>Simplify the mapping from an entity to a map</li> <li>Fix database writer test</li> <li>Make stream emit query result on subscription</li> <li>Update example to use StreamBuilder</li> <li>Update README</li> </ul>"},{"location":"changelog/#bug-fixes_17","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Correct mapper instance name referenced by generated query methods</li> <li>Fix adapter instances naming</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":""},{"location":"changelog/#changes_16","title":"Changes","text":"<ul> <li>Add database adapters</li> <li>Run floor Flutter tests</li> <li>Move value objects to value_objects directory</li> <li>Map source elements into value objects in processors</li> <li>Use GeneratorForAnnotation and TypeChecker to verify annotations</li> <li>Throw more specific errors on obfuscated database annotation</li> </ul>"},{"location":"changelog/#features_16","title":"\ud83d\ude80 Features","text":"<ul> <li>Add support for migrations</li> <li>Add support for returning Streams as query result</li> <li>Support accessing data from Data Access Objects</li> <li>Add entity classes to database annotation</li> <li>Add support for indices</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":""},{"location":"changelog/#features_17","title":"\ud83d\ude80 Features","text":"<ul> <li>Support conflict strategies when inserting and updating records</li> <li>Add support for running queries that return void</li> <li>Add support for foreign keys</li> <li>Add parameter verification for query methods</li> <li>Return deleted row count on delete</li> <li>Return updated rows count on update</li> <li>Return ID/s of inserted item/s</li> <li>Add support for transactions</li> <li>Add support for changing (insert, update, delete) lists</li> <li>Support custom entity name</li> <li>Enable NOT NULL columns</li> <li>Enable custom column name mapping</li> <li>Add delete methods code generation and fix update methods</li> <li>Add update methods code generation</li> <li>Add insert methods code generation</li> <li>Add code generator for query methods</li> <li>Code generation for database creation</li> </ul>"},{"location":"daos/","title":"Data Access Objects","text":"<p>These components are responsible for managing access to the underlying SQLite database and are defined as abstract classes with method signatures and query statements. DAO classes can use inherited methods by implementing and extending classes while also using mixins.</p> <pre><code>@dao\nabstract class PersonDao {\n@Query('SELECT * FROM Person')\nFuture&lt;List&lt;Person&gt;&gt; findAllPersons();\n\n@Query('SELECT * FROM Person WHERE id = :id')\nStream&lt;Person?&gt; findPersonById(int id);\n\n@insert\nFuture&lt;void&gt; insertPerson(Person person);\n}\n</code></pre>"},{"location":"daos/#queries","title":"Queries","text":"<p>Method signatures turn into query methods by adding the <code>@Query()</code> annotation with the query in parenthesis to them. Be mindful about the correctness of your SQL statements as they are only partly validated while generating the code. These queries have to return either a <code>Future</code> or a <code>Stream</code> of an entity or <code>void</code>. Returning <code>Future&lt;void&gt;</code> comes in handy whenever you want to delete the full content of a table, for instance. Some query method examples can be seen in the following.</p> <p>A function returning a single item will return <code>null</code> when no matching row is found. Thereby, the function is required to return a nullable type. For example <code>Person?</code>. This way, we leave the handling of an absent row up to you and don't attempt to guess intention.</p> <pre><code>@Query('SELECT * FROM Person WHERE id = :id')\nFuture&lt;Person?&gt; findPersonById(int id);\n\n@Query('SELECT * FROM Person WHERE id = :id AND name = :name')\nFuture&lt;Person?&gt; findPersonByIdAndName(int id, String name);\n\n@Query('SELECT * FROM Person')\nFuture&lt;List&lt;Person&gt;&gt; findAllPersons(); // select multiple items\n\n@Query('SELECT * FROM Person')\nStream&lt;List&lt;Person&gt;&gt; findAllPersonsAsStream(); // stream return\n\n@Query('DELETE FROM Person')\nFuture&lt;void&gt; deleteAllPersons(); // query without returning an entity\n\n@Query('SELECT * FROM Person WHERE id IN (:ids)')\nFuture&lt;List&lt;Person&gt;&gt; findPersonsWithIds(List&lt;int&gt; ids); // query with IN clause\n</code></pre> <p>Query arguments, when using SQLite's <code>LIKE</code> operator, have to be supplied by the input of a method. It's not possible to define a pattern matching argument like <code>%foo%</code> in the query itself.</p> <pre><code>// dao\n@Query('SELECT * FROM Person WHERE name LIKE :name')\nFuture&lt;List&lt;Person&gt;&gt; findPersonsWithNamesLike(String name);\n\n// usage\nfinal name = '%foo%';\nawait dao.findPersonsWithNamesLike(name);\n</code></pre>"},{"location":"daos/#data-changes","title":"Data Changes","text":"<p>Use the <code>@insert</code>, <code>@update</code> and <code>@delete</code> annotations for inserting and changing persistent data. All these methods accept single or multiple entity instances.</p>"},{"location":"daos/#insert","title":"Insert","text":"<p><code>@insert</code> marks a method as an insertion method. When using the capitalized <code>@Insert</code> you can specify a conflict strategy. Else it just defaults to aborting the insert. These methods can return a <code>Future</code> of either <code>void</code>, <code>int</code> or <code>List&lt;int&gt;</code>. - <code>void</code> return nothing - <code>int</code> return primary key of inserted item - <code>List&lt;int&gt;</code> return primary keys of inserted items</p> <pre><code>@Insert(onConflict: OnConflictStrategy.rollback)\nFuture&lt;void&gt; insertPerson(Person person);\n\n@insert\nFuture&lt;List&lt;int&gt;&gt; insertPersons(List&lt;Person&gt; persons);\n</code></pre>"},{"location":"daos/#update","title":"Update","text":"<p><code>@update</code> marks a method as an update method. When using the capitalized <code>@Update</code> you can specify a conflict strategy. Else it just defaults to aborting the update. These methods can return a <code>Future</code> of either <code>void</code> or <code>int</code>. - <code>void</code> return nothing - <code>int</code> return number of changed rows</p> <pre><code>@Update(onConflict: OnConflictStrategy.replace)\nFuture&lt;void&gt; updatePerson(Person person);\n\n@update\nFuture&lt;int&gt; updatePersons(List&lt;Person&gt; persons);\n</code></pre>"},{"location":"daos/#delete","title":"Delete","text":"<p><code>@delete</code> marks a method as a deletion method. These methods can return a <code>Future</code> of either <code>void</code> or <code>int</code>. - <code>void</code> return nothing - <code>int</code> return number of deleted rows</p> <pre><code>@delete\nFuture&lt;void&gt; deletePerson(Person person);\n\n@delete\nFuture&lt;int&gt; deletePersons(List&lt;Person&gt; persons);\n</code></pre>"},{"location":"daos/#streams","title":"Streams","text":"<p>As already mentioned, queries cannot only return values once when called but also continuous streams of query results. The returned streams keep you in sync with the changes happening in the database tables. This feature plays well with the <code>StreamBuilder</code> widget which accepts a stream of values and rebuilds itself whenever there is a new emission. These methods return broadcast streams and thus, can have multiple listeners.</p> <p>A function returning a stream of single items will emit <code>null</code> when no matching row is found. Thereby, it's necessary to make the function return a stream of a nullable type. For example <code>Stream&lt;Person?&gt;</code>. In case you're not interested in <code>null</code>s, you can simply use <code>Stream.where((value) =&gt; value != null)</code> to get rid of them.</p> <pre><code>// definition\n@dao\nabstract class PersonDao {\n@Query('SELECT * FROM Person WHERE id = :id')\nStream&lt;Person?&gt; findPersonByIdAsStream(int id);\n\n@Query('SELECT * FROM Person')\nStream&lt;List&lt;Person&gt;&gt; findAllPersonsAsStream();\n}\n\n// usage\nStreamBuilder&lt;List&lt;Person&gt;&gt;(\nstream: dao.findAllPersonsAsStream(),\nbuilder: (BuildContext context, AsyncSnapshot&lt;List&lt;Person&gt;&gt; snapshot) {\n// do something with the values here\n},\n);\n</code></pre> <p>Attention</p> <ul> <li>Only methods annotated with <code>@insert</code>, <code>@update</code> and <code>@delete</code> trigger <code>Stream</code> emissions.   Inserting data by using the <code>@Query()</code> annotation doesn't.</li> <li>It is now possible to return a <code>Stream</code> if the function queries a database view. But it will fire on any <code>@update</code>, <code>@insert</code>, <code>@delete</code> events in the whole database, which can get quite taxing on the runtime. Please add it only if you know what you are doing!   This is mostly due to the complexity of detecting which entities are involved in a database view.</li> </ul>"},{"location":"daos/#inheritance","title":"Inheritance","text":"<p>Data access object classes support inheritance as shown in the following. There is no limit to inheritance levels and thus, each abstract parent can have another abstract parent. Bear in mind that only abstract classes allow method signatures without an implementation body and thereby, make sure to position your to-be-inherited methods in an abstract class and extend this class with your DAO.</p> <pre><code>@dao\nabstract class PersonDao extends AbstractDao&lt;Person&gt; {\n@Query('SELECT * FROM Person WHERE id = :id')\nFuture&lt;Person?&gt; findPersonById(int id);\n}\n\nabstract class AbstractDao&lt;T&gt; {\n@insert\nFuture&lt;void&gt; insertItem(T item);\n}\n\n// usage\nfinal person = Person(1, 'Simon');\nawait personDao.insertItem(person);\n\nfinal result = await personDao.findPersonById(1);\n</code></pre>"},{"location":"database-views/","title":"Database Views","text":"<p>If you want to define static <code>SELECT</code>-statements which return different types than your entities, your best option is to use <code>@DatabaseView</code>. A database view can be understood as a virtual table, which can be queried like a real table.</p> <p>A database view in flat is defined and used similarly to entities, with the main difference being that access is read-only, which means that update, insert and delete functions are not possible. Similarly to entities, the class name is used if no <code>viewName</code> was set.</p> <pre><code>@DatabaseView('SELECT distinct(name) AS name FROM person', viewName: 'name')\nclass Name {\nfinal String name;\n\nName(this.name);\n}\n</code></pre> <p>Database views do not have any foreign/primary keys or indices. Instead, you should manually define indices which fit to your statement and put them into the <code>@Entity</code> annotation of the involved entities.</p> <p>Setters, getters and static fields are automatically ignored (like in entities), you can specify additional fields to ignore by annotating them with <code>@ignore</code>.</p> <p>After defining a database view in your code, you have to add it to your database by adding it to the <code>views</code> field of the <code>@Database</code> annotation:</p> <pre><code>@Database(version: 1, entities: [Person], views: [Name])\nabstract class AppDatabase extends FlatDatabase {\n// DAO getters\n}\n</code></pre> <p>You can then query the view via a DAO function like an entity.</p> <p>It is possible for DatabaseViews to inherit common fields from a base class, just like in entities.</p> <p>Attention</p> <p>It is now possible to return a <code>Stream</code> object from a DAO method which queries a database view. But it will fire on any <code>@update</code>, <code>@insert</code>, <code>@delete</code> events in the whole database, which can get quite taxing on the runtime. Please add it only if you know what you are doing! This is mostly due to the complexity of detecting which entities are involved in a database view.</p>"},{"location":"entities/","title":"Entities","text":"<p>An entity is a persistent class. Flat automatically creates the mappings between the in-memory objects and database table rows. It's possible to supply custom metadata to Flat by adding optional values to the <code>Entity</code> annotation. It has the additional attribute of <code>tableName</code> which opens up the possibility to use a custom name for that specific entity instead of using the class name. <code>foreignKeys</code> allows adding foreign keys to the entity. More information on how to use these can be found in the Foreign Keys section. Indices are supported as well. They can be used by adding an <code>Index</code> to the <code>indices</code> value of the entity. For further information of these, please refer to the Indices section.</p> <p><code>@PrimaryKey</code> marks property of a class as the primary key column. This property has to be of type int. The value can be automatically generated by SQLite when <code>autoGenerate</code> is enabled. For more information about primary keys and especially compound primary keys, refer to the Primary Keys section.</p> <p><code>@ColumnInfo</code> enables custom mapping of single table columns. With the annotation it's possible to give columns a custom name. If you want a table's column to be nullable, mark the entity's field as nullable. More information can be found in the Null Safety section.</p> <p>Attention</p> <ul> <li>Flat automatically uses the first constructor defined in the entity class for creating in-memory objects from database rows.</li> <li>There needs to be a constructor.</li> </ul> <pre><code>@Entity(tableName: 'person')\nclass Person {\n@PrimaryKey(autoGenerate: true)\nfinal int id;\n\n@ColumnInfo(name: 'custom_name')\nfinal String name;\n\nPerson(this.id, this.name);\n}\n</code></pre>"},{"location":"entities/#supported-types","title":"Supported Types","text":"<p>Flat entities can hold values of the following Dart types which map to their corresponding SQLite types and vice versa.</p> <ul> <li><code>int</code> - INTEGER</li> <li><code>double</code> - REAL</li> <li><code>String</code> - TEXT</li> <li><code>bool</code> - INTEGER (0 = false, 1 = true)</li> <li><code>Uint8List</code> - BLOB</li> </ul> <p>In case you want to store sophisticated Dart objects that can be represented by one of the above types, take a look at Type Converters.</p>"},{"location":"entities/#primary-keys","title":"Primary Keys","text":"<p>Whenever a compound primary key is required (e.g. n-m relationships), the syntax for setting the keys differs from the previously mentioned way of setting primary keys. Instead of annotating a field with <code>@PrimaryKey</code>, the <code>@Entity</code> annotation's <code>primaryKey</code> attribute is used. It accepts a list of column names that make up the compound primary key.</p> <pre><code>@Entity(primaryKeys: ['id', 'name'])\nclass Person {\nfinal int id;\n\nfinal String name;\n\nPerson(this.id, this.name);\n}\n</code></pre>"},{"location":"entities/#foreign-keys","title":"Foreign Keys","text":"<p>Add a list of <code>ForeignKey</code>s to the <code>Entity</code> annotation of the referencing entity. <code>childColumns</code> define the columns of the current entity, whereas <code>parentColumns</code> define the columns of the parent entity. Foreign key actions can get triggered after defining them for the <code>onUpdate</code> and <code>onDelete</code> properties.</p> <pre><code>@Entity(\ntableName: 'dog',\nforeignKeys: [\nForeignKey(\nchildColumns: ['owner_id'],\nparentColumns: ['id'],\nentity: Person,\n)\n],\n)\nclass Dog {\n@PrimaryKey()\nfinal int id;\n\nfinal String name;\n\n@ColumnInfo(name: 'owner_id')\nfinal int ownerId;\n\nDog(this.id, this.name, this.ownerId);\n}\n</code></pre>"},{"location":"entities/#indices","title":"Indices","text":"<p>Indices help speeding up query, join and grouping operations. For more information on SQLite indices please refer to the official documentation. To create an index with Flat, add a list of indices to the <code>@Entity</code> annotation. The example below shows how to create an index on the <code>custom_name</code> column of the entity.</p> <p>The index, moreover, can be named by using its <code>name</code> attribute. To set an index to be unique, use the <code>unique</code> attribute. <pre><code>@Entity(tableName: 'person', indices: [Index(value: ['custom_name'])])\nclass Person {\n@primaryKey\nfinal int id;\n\n@ColumnInfo(name: 'custom_name')\nfinal String name;\n\nPerson(this.id, this.name);\n}\n</code></pre></p>"},{"location":"entities/#embedded-objects","title":"Embedded objects","text":"<p>Embedded annotation can be used on fields of an entity, view or a plain object and can be helpful to add nested fields. If the container is an Entity, nested fields will be columns in the Entity's database table.</p> <p>If the embedded field is nullable, columns generated from it's fields will be nullable in the database. And when it's read, it will be set to null if all of it's fields are null. Otherwise, it will be constructed.</p> <p>Embedded annotation has a prefix field to prevent conflict between column names of owner and sub objects. <pre><code>@entity\nclass Person {\n@primaryKey\nfinal int id;\n\nfinal String name;\n\n@Embedded('address_')\nfinal Address address;\n\nPerson(this.id, this.name, this.address);\n}\n\nclass Address {\nfinal String city;\n\nfinal String street;\n\nAddress(this.city, this.street);\n}\n</code></pre></p>"},{"location":"entities/#ignoring-fields","title":"Ignoring Fields","text":"<p>Getters, setters and all static fields of entities are ignored by default and thus excluded from the library's mapping. In case further fields should be ignored, the <code>@ignore</code> annotation should be used and applied as shown in the following snippet.</p> <pre><code>class Person {\n@primaryKey\nfinal int id;\n\nfinal String name;\n\n@ignore\nString nickname;\n\n// ignored by default\nString get combinedName =&gt; \"$name ($nickname)\";\n\nPerson(this.id, this.name);\n}\n</code></pre>"},{"location":"entities/#inheritance","title":"Inheritance","text":"<p>Just like Daos, entities (and database views) can inherit from a common base class and use their fields. The entity just has to <code>extend</code> the base class. This construct will be treated as if all the fields in the base class are part of the entity, meaning the database table will have all columns of the entity and the base class.</p> <p>The base class does not have to have a separate annotation for the class. Its fields can be annotated just like normal entity columns. Foreign keys and indices have to be declared in the entity and can't be defined in the base class.</p> <pre><code>class BaseObject {\n@PrimaryKey()\nfinal int id;\n\n@ColumnInfo(name: 'create_time')\nfinal String createTime;\n\n@ColumnInfo(name: 'update_time')\nfinal String updateTime;\n\nBaseObject(\nthis.id,\nthis.updateTime, {\nString createTime,\n}) : this.createTime = createTime ?? DateTime.now().toString();\n\n@override\nList&lt;Object&gt; get props =&gt; [];\n}\n\n@Entity(tableName: 'comments')\nclass Comment extends BaseObject {\nfinal String author;\n\nfinal String content;\n\nComment(\nthis.author, {\nint id,\nthis.content = '', String createTime,\nString updateTime,\n}) : super(id, updateTime, createTime: createTime);\n}\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>For further examples take a look at the example and test directories.</p>"},{"location":"feedback/","title":"Bugs, Ideas, and Feedback","text":"<p>For bugs please use GitHub Issues. For questions, ideas, and discussions use GitHub Discussions.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#1-setup-dependencies","title":"1. Setup Dependencies","text":"<p>Add the runtime dependency <code>flat_orm</code> as well as the generator <code>flat_generator</code> to your <code>pubspec.yaml</code>. The third dependency is <code>build_runner</code> which has to be included as a dev dependency just like the generator.</p> <ul> <li><code>flat_orm</code> holds all the code you are going to use in your application.</li> <li><code>flat_generator</code> includes the code for generating the database classes.</li> <li><code>build_runner</code> enables a concrete way of generating source code files.</li> </ul> <pre><code>dependencies:\nflutter:\nsdk: flutter\nflat_orm: ^1.6.0\n\ndev_dependencies:\nflat_generator: ^1.6.2\nbuild_runner: ^2.1.2\n</code></pre>"},{"location":"getting-started/#2-create-an-entity","title":"2. Create an Entity","text":"<p>It will represent a database table as well as the scaffold of your business object. <code>@entity</code> marks the class as a persistent class. It's required to add a primary key to your table. You can do so by adding the <code>@primaryKey</code> annotation to an <code>int</code> property. There is no restriction on where you put the file containing the entity.</p> <pre><code>// entity/person.dart\n\nimport 'package:flat_orm/flat_orm.dart';\n\n@entity\nclass Person {\n@primaryKey\nfinal int id;\n\nfinal String name;\n\nPerson(this.id, this.name);\n}\n</code></pre>"},{"location":"getting-started/#3-create-a-dao-data-access-object","title":"3. Create a DAO (Data Access Object)","text":"<p>This component is responsible for managing access to the underlying SQLite database. The abstract class contains the method signatures for querying the database which have to return a <code>Future</code> or <code>Stream</code>.</p> <ul> <li>You can define queries by adding the <code>@Query</code> annotation to a method.   The SQL statement has to get added in parenthesis.   The method must return a <code>Future</code> or <code>Stream</code> of the <code>Entity</code> you're querying for.</li> <li><code>@insert</code> marks a method as an insertion method.</li> </ul> <pre><code>// dao/person_dao.dart\n\nimport 'package:flat_orm/flat_orm.dart';\n\n@dao\nabstract class PersonDao {\n@Query('SELECT * FROM Person')\nFuture&lt;List&lt;Person&gt;&gt; findAllPersons();\n\n@Query('SELECT * FROM Person WHERE id = :id')\nStream&lt;Person?&gt; findPersonById(int id);\n\n@insert\nFuture&lt;void&gt; insertPerson(Person person);\n}\n</code></pre>"},{"location":"getting-started/#4-create-the-database","title":"4. Create the Database","text":"<p>It has to be an abstract class which extends <code>FlatDatabase</code>. Furthermore, it's required to add <code>@Database()</code> to the signature of the class. Make sure to add the created entity to the <code>entities</code> attribute of the <code>@Database</code> annotation. In order to make the generated code work, it's required to also add the listed imports.</p> <p>Make sure to add <code>part 'database.g.dart';</code> beneath the imports of this file. It's important to note that 'database' has to get exchanged with the filename of the database definition. In this case, the file is named <code>database.dart</code>.</p> <pre><code>// database.dart\n\n// required package imports\nimport 'dart:async';\nimport 'package:flat_orm/flat_orm.dart';\nimport 'package:sqflite/sqflite.dart' as sqflite;\n\nimport 'dao/person_dao.dart';\nimport 'entity/person.dart';\n\npart 'database.g.dart'; // the generated code will be there\n\n@Database(version: 1, entities: [Person])\nabstract class AppDatabase extends FlatDatabase {\nPersonDao get personDao;\n}\n</code></pre>"},{"location":"getting-started/#5-run-the-code-generator","title":"5. Run the Code Generator","text":"<p>Run the generator with <code>flutter packages pub run build_runner build</code>. To automatically run it, whenever a file changes, use <code>flutter packages pub run build_runner watch</code>.</p>"},{"location":"getting-started/#6-use-the-generated-code","title":"6. Use the Generated Code","text":"<p>For obtaining an instance of the database, use the generated <code>$FlatAppDatabase</code> class, which allows access to a database builder. The name is being composed by <code>$Flat</code> and the database class name. The string passed to <code>databaseBuilder()</code> will be the database file name. For initializing the database, call <code>build()</code> and make sure to <code>await</code> the result.</p> <p>In order to retrieve the <code>PersonDao</code> instance, invoking the <code>persoDao</code> getter on the database instance is enough. Its functions can be used as shown in the following snippet.</p> <pre><code>final database = await $FlatAppDatabase.databaseBuilder('app_database.db').build();\n\nfinal personDao = database.personDao;\nfinal person = Person(1, 'Frank');\n\nawait personDao.insertPerson(person);\nfinal result = await personDao.findPersonById(1);\n</code></pre> <p>For further examples take a look at the example and test directories.</p>"},{"location":"in-memory-database/","title":"In Memory Database","text":"<p>To instantiate an in-memory database, use the static <code>inMemoryDatabaseBuilder()</code> method of the generated <code>$FlatAppDatabase</code> class instead of <code>databaseBuilder()</code>.</p> <pre><code>final database = await $FlatAppDatabase.inMemoryDatabaseBuilder().build();\n</code></pre>"},{"location":"initialization-callback/","title":"Initialization Callback","text":"<p>In order to hook into Flat's database initialization process, <code>Callback</code> should be used. It allows the invocation of three separate callbacks which are triggered when the database has been</p> <ul> <li>initialized for the first time (<code>onCreate</code>).</li> <li>opened (<code>onOpen</code>).</li> <li>upgraded (<code>onUpgrade</code>).</li> </ul> <p>Each callback is optional.</p> <p>Their usage can be seen in the following snippet.</p> <pre><code>final callback = Callback(\nonCreate: (database, version) { /* database has been created */ },\nonOpen: (database) { /* database has been opened */ },\nonUpgrade: (database, startVersion, endVersion) { /* database has been upgraded */ },\n);\n\nfinal database = await $FlatAppDatabase\n.databaseBuilder('app_database.db')\n.addCallback(callback)\n.build();\n</code></pre>"},{"location":"isolates/","title":"Isolates","text":"<p>As Flat is based on sqflite, Android and iOS apps access the SQLite database on a native background thread. On Linux, macOS, and Windows, a separate isolate is used. You can do some further reading on sqflite's background work mechanisms here.</p>"},{"location":"migrations/","title":"Migrations","text":"<p>Whenever you are doing changes to your entities, you're required to also migrate the old data.</p> <p>First, update your entity. Next, Increase the database version. Define a <code>Migration</code> which specifies a <code>startVersion</code>, an <code>endVersion</code> and a function that executes SQL to migrate the data. At last, use <code>addMigrations()</code> on the obtained database builder to add migrations. Don't forget to trigger the code generator again, to create the code for handling the new entity.</p> <pre><code>// update entity with new 'nickname' field\n@Entity(tableName: 'person')\nclass Person {\n@PrimaryKey(autoGenerate: true)\nfinal int id;\n\n@ColumnInfo(name: 'custom_name')\nfinal String name;\n\nfinal String nickname;\n\nPerson(this.id, this.name, this.nickname);\n}\n\n// bump up database version\n@Database(version: 2)\nabstract class AppDatabase extends FlatDatabase {\nPersonDao get personDao;\n}\n\n// create migration\nfinal migration1to2 = Migration(1, 2, (database) async {\nawait database.execute('ALTER TABLE person ADD COLUMN nickname TEXT');\n});\n\nfinal database = await $FlatAppDatabase\n.databaseBuilder('app_database.db')\n.addMigrations([migration1to2])\n.build();\n</code></pre>"},{"location":"naming/","title":"Naming","text":"<p>Just like Floor, Flat is another related word to Room Room with fl in it!</p>"},{"location":"null-safety/","title":"Null Safety","text":"<p>Flat infers nullability of database columns directly from entity fields, as mentioned in the Entities section. When not explicitly making a field nullable by applying <code>?</code> to its type, a column cannot hold <code>NULL</code>. For more information regarding <code>null</code>s as query results, see the Queries and Streams section. </p>"},{"location":"platform-support/","title":"Platform Support","text":"<p>Flat supports iOS, Android, Linux, macOS and Windows. The SQLite database access on iOS and Android is provided by sqflite whereas Linux, macOS and Windows use sqflite's ffi implementation.</p> <p>There currently is no support for Flutter for web.</p>"},{"location":"testing/","title":"Testing","text":"<p>Simply instantiate an in-memory database and run the database tests on your local development machine as shown in the following snippet. For more test references, check out the project's tests.</p> <p>In case you're running Linux, make sure to have sqlite3 and libsqlite3-dev installed.</p> <pre><code>import 'package:flat_orm/flat_orm.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\n// your imports follow here\nimport 'dao/person_dao.dart';\nimport 'database.dart';\nimport 'entity/person.dart';\n\nvoid main() {\ngroup('database tests', () {\nlate TestDatabase database;\nlate PersonDao personDao;\n\nsetUp(() async {\ndatabase = await $FlatTestDatabase\n.inMemoryDatabaseBuilder()\n.build();\npersonDao = database.personDao;\n});\n\ntearDown(() async {\nawait database.close();\n});\n\ntest('find person by id', () async {\nfinal person = Person(1, 'Simon');\nawait personDao.insertPerson(person);\n\nfinal actual = await personDao.findPersonById(person.id);\n\nexpect(actual, equals(person));\n});\n}\n}\n</code></pre>"},{"location":"transactions/","title":"Transactions","text":"<p>Transactions are useful when you want to perform multiple operations. With Flat you have two options to start a transaction:</p> <ol> <li> <p>Inside a DAO:</p> <p>You can annotate a method with <code>@transaction</code> and make that method <code>async</code>. Also you have to <code>await</code> for every database call you make inside that method.</p> <pre><code>@transaction\nFuture&lt;void&gt; replacePersons(List&lt;Person&gt; persons) async {\nawait deleteAllPersons();\nawait insertPersons(persons);\n}\n</code></pre> </li> <li> <p>On database:</p> <p>You can call <code>transaction</code> on your database with a callback which will get called whenever transaction created with a database object for you to do your operations on. Again it's required to <code>await</code> for every database call.</p> <pre><code>await database.transaction&lt;void&gt;((dynamic db) async {\nif (db is AppDatabase) {\nawait db.personDao.deleteAllPersons();\nawait db.personDao.insertPersons(persons);\n}\n});\n</code></pre> </li> </ol> <p>Attention</p> <ul> <li>Transactions can return objects</li> </ul>"},{"location":"type-converters/","title":"Type Converters","text":"<p>Attention</p> <p>This feature is still in an experimental state. Please use it with caution and file issues for problems you encounter.</p> <p>SQLite allows storing values of only a handful types. Whenever more complex Dart in-memory objects should be stored, there sometimes is the need for converting between Dart and SQLite compatible types. Dart's <code>DateTime</code>, for instance, provides an object-oriented API for handling time. Objects of this class can simply be represented as <code>int</code> values by mapping <code>DateTime</code> to its timestamp in milliseconds. Instead of manually mapping between these types repeatedly, when reading and writing, type converters can be used. It's sufficient to define the conversion from a database to an in-memory type and vice versa once, which then is reused automatically.</p> <p>The implementation and usage of the mentioned <code>DateTime</code> to <code>int</code> converter is described in the following.</p> <ol> <li> <p>Create a converter class that implements the abstract <code>TypeConverter</code> and supply the in-memory object type and database type as parameterized types.    This class inherits the <code>decode()</code> and <code>encode()</code> functions which define the conversion from one to the other type. <pre><code>class DateTimeConverter extends TypeConverter&lt;DateTime, int&gt; {\n@override\nDateTime decode(int databaseValue) {\nreturn DateTime.fromMillisecondsSinceEpoch(databaseValue);\n}\n\n@override\nint encode(DateTime value) {\nreturn value.millisecondsSinceEpoch;\n}\n}\n</code></pre></p> </li> <li> <p>Apply the created type converter to the database by using the <code>@TypeConverters</code> annotation and make sure to additionally import the file of your type converter here.    Importing it in your database file is always necessary because the generated code will be <code>part</code> of your database file and this is the location where your type converters get instantiated. <pre><code>@TypeConverters([DateTimeConverter])\n@Database(version: 1, entities: [Order])\nabstract class OrderDatabase extends FlatDatabase {\nOrderDao get orderDao;\n}\n</code></pre></p> </li> <li> <p>Use the non-default <code>DateTime</code> type in an entity. <pre><code>@entity\nclass Order {\n@primaryKey\nfinal int id;\n\nfinal DateTime date;\n\nOrder(this.id, this.date);\n}\n</code></pre></p> </li> </ol> <p>Type converters can be applied to</p> <ol> <li>databases</li> <li>DAOs</li> <li>entities/views</li> <li>entity/view fields</li> <li>DAO methods</li> <li>DAO method parameters</li> </ol> <p>The type converter is added to the scope of the element so if you put it on a class, all methods/fields in that class will be able to use the converter.</p> <p>The closest type converter wins! If you, for example, add a converter on the database level and another one on a DAO method parameter, which takes care of converting the same types, the one declared next to the DAO method parameter will be used. Please refer to the above list to get more information about the precedence of converters.</p>"}]}